{% import 'common.j2' as common %}
/* CTF 1.8 */

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015-2020 Philippe Proulx <pproulx@efficios.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 *
 * The following TSDL code was generated by barectf v{{ barectf_version.__version__ }}
 * on {{ common.gen_date }}.
 *
 * For more details, see <https://barectf.org/>.
 */
{#
 # Generates a root field type string named `name` for the field type
 # `rft` with all the lines except the first one indented with a single
 # tab.
 #}
{% macro root_ft(name, rft) %}
{{ name }} := {{ rft | ft_str | indent_tab }};
{%- endmacro %}

trace {
	major = 1;
	minor = 8;
	byte_order = {{ cfg.trace.type.default_byte_order | bo_str }};
{% if cfg.trace.type.uuid %}
	uuid = "{{ cfg.trace.type.uuid }}";
{% endif %}
{% if cfg.trace.type._pkt_header_ft %}
	{{ root_ft('packet.header', cfg.trace.type._pkt_header_ft) }}
{% endif %}
};

env {
{% for name, value in cfg.trace.environment.items() %}
	{{ name }} = {{ value if value is number else '"{}"'.format(value | escape_dq) }};
{% endfor %}
};

{# all clock types (stream types's default clock types) #}
{% for clk_type in cfg.trace.type.clock_types | sort %}
clock {
	name = {{ clk_type.name }};
	{% if clk_type.description %}
	description = "{{ clk_type.description | escape_dq }}";
	{% endif %}
	{% if clk_type.uuid %}
	uuid = "{{ clk_type.uuid }}";
	{% endif %}
	freq = {{ clk_type.frequency }};
	precision = {{ clk_type.precision }};
	offset_s = {{ clk_type.offset.seconds }};
	offset = {{ clk_type.offset.cycles }};
	absolute = {{ 'true' if clk_type.origin_is_unix_epoch else 'false' }};
};

{% endfor %}
{# stream types and their event types #}
{% for stream_type in cfg.trace.type.stream_types | sort %}
/* Stream type `{{ stream_type.name }}` */
stream {
	id = {{ stream_type.id }};
	{{ root_ft('packet.context', stream_type._pkt_ctx_ft) }}
	{% if stream_type._ev_header_ft %}
	{{ root_ft('event.header', stream_type._ev_header_ft) }}
	{% endif %}
	{% if stream_type.event_common_context_field_type %}
	{{ root_ft('event.context', stream_type.event_common_context_field_type) }}
	{% endif %}
};

	{# stream type's event types #}
	{% for ev_type in stream_type.event_types | sort %}
event {
	stream_id = {{ stream_type.id }};
	id = {{ ev_type.id }};
	name = "{{ ev_type.name }}";
		{% if ev_type.log_level %}
	loglevel = {{ ev_type.log_level }};
		{% endif %}
		{% if ev_type.specific_context_field_type %}
	{{ root_ft('context', ev_type.specific_context_field_type) }}
		{% endif %}
		{% if ev_type.payload_field_type %}
	{{ root_ft('fields', ev_type.payload_field_type) }}
		{% endif %}
};

	{% endfor %}
{% endfor %}
